"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const circleci_1 = require("./circleci");
const constants_1 = require("./constants");
const circleci_v2_1 = require("./circleci.v2");
const travisci_1 = require("./travisci");
exports.getOtp = async () => {
    const CFA_HOST = process.env.CFA_HOST || constants_1.PRIMARY_CFA_HOST;
    const CFA_SECRET = process.env.CFA_SECRET;
    if (!CFA_SECRET) {
        throw new Error('Required env var "CFA_SECRET" is missing or empty');
    }
    const cfaClient = axios_1.default.create({
        baseURL: CFA_HOST,
        headers: {
            Authorization: `bearer ${CFA_SECRET}`,
        },
        validateStatus: () => true,
    });
    const version = CFA_HOST === constants_1.PRIMARY_CFA_HOST || CFA_HOST.endsWith('.ngrok.io') ? constants_1.CFAVersion.V2 : constants_1.CFAVersion.V1;
    if (version === constants_1.CFAVersion.V1) {
        let proofExchange;
        if (process.env.CIRCLECI) {
            proofExchange = await circleci_1.getProofThroughCircleCI(cfaClient);
        }
        else {
            throw new Error('Unsupported CI provider, currently we only support CircleCI');
        }
        return proofExchange.token;
    }
    else {
        const projectId = process.env.CFA_PROJECT_ID;
        if (!projectId) {
            throw new Error('Requested env var "CFA_PROJECT_ID" is missing or empty');
        }
        if (process.env.CIRCLECI) {
            const request = await circleci_v2_1.requestThroughCircleCI(cfaClient, projectId);
            return request.response;
        }
        else if (process.env.TRAVIS) {
            const request = await travisci_1.requestThroughTravisCI(cfaClient, projectId);
            return request.response;
        }
        else {
            throw new Error('Unsupported CI provider, currently we only support CircleCI');
        }
    }
};
//# sourceMappingURL=index.js.map