"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let retryInterval = 10000;
exports._setRetryIntervalForTesting = (n) => (retryInterval = n);
exports.getProofThroughCircleCI = async (cfaClient) => {
    const startResponse = await cfaClient.post('/proof/circleci/start', {
        projectOwner: process.env.CIRCLE_PROJECT_USERNAME,
        projectName: process.env.CIRCLE_PROJECT_REPONAME,
        buildNumber: parseInt(process.env.CIRCLE_BUILD_NUM || '-1', 10),
    });
    if (startResponse.status !== 200) {
        throw new Error(`Unexpected status when starting proof process on CircleCI: ${startResponse.status}`);
    }
    const proofPayload = startResponse.data;
    console.log('\n\n\nProof:');
    console.log(proofPayload.content);
    const validateResponse = await cfaClient.post(`/proof/circleci/validate/${proofPayload.proofId}`);
    if (validateResponse.status !== 200) {
        throw new Error(`Unexpected status code when validating proof on CircleCI: ${validateResponse.status}`);
    }
    let acquireCode = 204;
    while (acquireCode === 204) {
        const acquireResponse = await cfaClient.post(`/proof/circleci/acquire/${proofPayload.proofId}`);
        acquireCode = acquireResponse.status;
        if (acquireCode === 200)
            return acquireResponse.data;
        // Check again in 10 seconds
        await new Promise(r => setTimeout(r, retryInterval));
    }
    throw new Error(`Unexpected status code while polling the CFA acquire endpoint: ${acquireCode}`);
};
//# sourceMappingURL=circleci.js.map